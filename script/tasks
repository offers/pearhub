#!/usr/bin/env php
<?php

require_once(dirname(__FILE__) . '/../config/global.inc.php');
require_once 'repo.inc.php';
require_once 'builder.inc.php';
require_once 'projects.inc.php';

function create_release($version, $project) {
  global $container;
  $gateway_releases = $container->get('ReleaseGateway');
  $release = new Release(
    array(
      'project_id' => $project->id(),
      'version' => $version,
      'status' => 'building',
      'mode' => 'auto'));
  $gateway_releases->insert($release);
}

function build_release($release, $project) {
  global $container;
  $repo_probe = $container->get('RepoProbe');
  $gateway_releases = $container->get('ReleaseGateway');
  $shell = $container->get('Shell');
  $local_copy = null;

  try {
    $repo = $repo_probe->getRepositoryAccess($project);
    if ($release->mode() == 'auto') {
      $local_copy = $repo->exportTag($release->version());
      $stability = $repo->getTagInfo($release->version())->stability();
    } else {
      $local_copy = $repo->exportRevision('HEAD');
      $stability = 'stable';
    }
    $files = new FileFinder($local_copy->getPath());
    $files->traverse($project->path(), $project->ignore(), $project->destination());
    $builder = $container->get('PackageBuilder');
    $builder->build($local_copy, $files, $project, $release->version(), $stability);
    $release->setCompleted();
    $gateway_releases->update(
      $release,
      array(
        'project_id' => $project->id(),
        'version' => $release->version()));
  } catch (Exception $ex) {
    $release->setFailed($ex->__toString());
    $gateway_releases->update(
      $release,
      array(
        'project_id' => $project->id(),
        'version' => $release->version()));
    echo "Caught Exception at " . __FILE__ . " : " . __LINE__ . "\n";
    echo $ex;
  }

  // Clean up working copy from temp folder
  if(null !== $local_copy) {
    $local_copy->destroy($shell);
  }
}

function task_rebuild_release($project_name, $release_version) {
  global $container;
  $gateway_project = $container->get('ProjectGateway');
  $gateway_releases = $container->get('ReleaseGateway');
  $project = $gateway_project->fetch(array('name' => $project_name));
  if (!$project) {
    throw new Exception("Can't find project " . $project);
  }
  $release = $gateway_releases->fetch(array('project_id' => $project->id(), 'version' => $release_version));
  if (!$release) {
    throw new Exception("Can't find release " . $release_version);
  }
  $release->setBuilding();
  $gateway_releases->update($release, array('project_id' => $project->id(), 'version' => $release->version()));
}

function task_delete_release($project_name, $release_version) {
  global $container;
  $gateway_project = $container->get('ProjectGateway');
  $gateway_releases = $container->get('ReleaseGateway');
  $builder = $container->get('PackageBuilder');
  $project = $gateway_project->fetch(array('name' => $project_name));
  if (!$project) {
    throw new Exception("Can't find project " . $project);
  }
  $release = $gateway_releases->fetch(array('project_id' => $project->id(), 'version' => $release_version));
  if (!$release) {
    throw new Exception("Can't find release " . $release_version);
  }
  $gateway_releases->delete(array('project_id' => $project->id(), 'version' => $release->version()));
  $builder->deletePackage($project, $release_version);
  task_pirum_build_channel();
}

function task_update_latest_versions() {
  global $container;
  $gateway_project = $container->get('ProjectGateway');
  $gateway_releases = $container->get('ReleaseGateway');
  foreach ($gateway_project->select() as $project) {
    $gateway_project->updateRevisionInfo(
      $project->id(),
      $gateway_releases->lastReleaseFor($project->id()));
  }
}

function task_list_projects() {
  global $container;
  $gateway_project = $container->get('ProjectGateway');
  foreach ($gateway_project->select() as $project) {
    echo "  ", $project->name(), "\n";
  }
}

function task_list_project_releases($project_name) {
  global $container;
  $gateway_project = $container->get('ProjectGateway');
  $gateway_releases = $container->get('ReleaseGateway');
  $project = $gateway_project->fetch(array('name' => $project_name));
  if (!$project) {
    throw new Exception("Can't find project " . $project);
  }
  echo "Releases for ", $project_name, "\n";
  foreach ($gateway_releases->selectByProject($project) as $release) {
    echo "  ", $release->version(), "\n";
  }
}

function task_sweep_projects() {
  global $container;
  $gateway_project = $container->get('ProjectGateway');
  $gateway_releases = $container->get('ReleaseGateway');
  $repo_probe = $container->get('RepoProbe');
  foreach ($gateway_project->selectWithAutomaticReleasePolicy() as $project) {
    try {
      $repo = $repo_probe->getRepositoryAccess($project);
      $latestTag = $repo->latestTag();
      if ($latestTag) {
        $lastRelease = $gateway_releases->lastReleaseFor($project);
        if (!$lastRelease || ($latestTag > $lastRelease->version())) {
          create_release($latestTag, $project);
        }
      }
    } catch (Exception $ex) {
      echo "Caught Exception at " . __FILE__ . " : " . __LINE__ . "\n";
      echo $ex;
    }
  }
}

function get_pending_releases() {
  global $container;
  $gateway_project = $container->get('ProjectGateway');
  $gateway_release = $container->get('ReleaseGateway');
  $result = array();
  foreach ($gateway_release->selectPendingBuild() as $release) {
    $project = $gateway_project->fetch(array('id' => $release->projectId()));
    if ($project) {
      $result[] = array('project' => $project, 'release' => $release);
    }
  }
  return $result;
}

function task_build_pending_releases() {
  $found = false;
  foreach (get_pending_releases() as $release) {
    build_release($release['release'], $release['project']);
    $found = true;
  }
  if ($found) {
    task_pirum_build_channel();
  }
}

function task_list_pending_releases() {
  foreach (get_pending_releases() as $release) {
    echo $release['project']->name(), " (", $release['release']->version(), ")\n";
  }
}

function task_list_tasks() {
  $defined_functions = get_defined_functions();
  echo "Available tasks:\n";
  foreach ($defined_functions['user'] as $fn) {
    if (preg_match('/^task_(.+)$/', $fn, $reg)) {
      echo "  ", $reg[1], "\n";
    }
  }
}

ob_start();
require_once 'thirdparty/pirum';
ob_clean();
class Pearhub_PirumBuilder extends Pirum_Builder {
  protected function buildIndex() {}
  protected function buildCss() {}
  protected function updateIndex() {}
  protected function updateCss() {}
}

function task_pirum_build_channel() {
  global $container;
  $builder = $container->get('Pearhub_PirumBuilder');
  $builder->build();
}

if (realpath($_SERVER['PHP_SELF']) == __FILE__) {
  $container = create_container();
  flock($file_lock = fopen(__FILE__, 'r'), LOCK_EX | LOCK_NB) or exit;
  if (isset($_SERVER['DEBUG']) && $_SERVER['DEBUG']) {
    $container->get('Shell')->debug = true;
    $container->get('RepoProbe')->debug = true;
  }
  try {
    if (isset($_SERVER['argv'][1]) && function_exists('task_'.$_SERVER['argv'][1])) {
      $args = $_SERVER['argv'];
      array_shift($args);
      array_shift($args);
      call_user_func_array('task_'.$_SERVER['argv'][1], $args);
    } else {
      task_list_tasks();
    }
  } catch (Exception $ex) {
    if (isset($_SERVER['EMAIL_FAILURE'])) {
      mail($_SERVER['EMAIL_FAILURE'], implode(" ", $_SERVER['argv']) . " FAILED!", $ex->__toString());
    }
    echo "Caught Exception at " . __FILE__ . " : " . __LINE__ . "\n";
    echo $ex;
    exit -1;
  }
}
